/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.sukrut.fsd.api;

import com.sukrut.fsd.model.Store;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-06-14T04:59:45.171+05:30")

@Api(value = "store", description = "the store API")
public interface StoreApi {

    @ApiOperation(value = "Create new store", nickname = "addstore", notes = "Creates new store", tags={ "store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/store/new/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addstore(@ApiParam(value = "Vendor will able to add stores depending upon the location" ,required=true )  @Valid @RequestBody Store body);


    @ApiOperation(value = "get store details storeId", nickname = "getStoreDetailsByStoreId", notes = "Returns the particular storeId details", response = Store.class, responseContainer = "List", tags={ "store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Store.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "invalid Id     ") })
    @RequestMapping(value = "/store/{storeId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Store>> getStoreDetailsByStoreId(@ApiParam(value = "id to search for store",required=true) @PathVariable("storeId") String storeId);


    @ApiOperation(value = "Get store list", nickname = "getStoreList", notes = "Returns the list of all stores", response = Store.class, responseContainer = "List", tags={ "store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Store.class, responseContainer = "List") })
    @RequestMapping(value = "/store/all/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Store>> getStoreList();


    @ApiOperation(value = "Update store", nickname = "updateStore", notes = "Updates the store", tags={ "store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid StoreName supplied"),
        @ApiResponse(code = 404, message = "Store not found"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/store/edit",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> updateStore(@ApiParam(value = "Vendor will able to add stores depenpending upon the location" ,required=true )  @Valid @RequestBody Store body);

}
